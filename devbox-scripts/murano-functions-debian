#!/bin/bash

function add_mirantis_repo() {
:
}


function database_connection_url() {
    local db="$1"
    echo "sqlite://${MURANO_CACHE_DIR}/${db}.sqlite"
}


function apt_install_anyway() {
    apt-get install --yes --force-yes --allow-unauthenticated "$@"
}

# Repository managing functions
#------------------------------
function disable_system_repos() {
    trace_in disable_system_repos "$@"

    for f in $(find /etc/apt -name '*.list'); do
        if [[ $f =~ mirantis-.* ]]; then
            echo_ "Won't change mirantis repo file '$f'"
        else
            echo_ "Disabling repo from file '$f'"
            mv -f $f $f.disabled
        fi
    done

    echo_ "Updating repository ..."
    apt-get -q update

    trace_out
}


function enable_system_repos() {
    trace_in enable_system_repos "$@"

    for f in $(find /etc/apt -name '*.list.disabled'); do
        if [[ $f =~ mirantis-.* ]]; then
            echo_ "Won't change mirantis repo file '$f'"
        else
            echo_ "Enabling repo from file '$f'"
            mv -f $f ${f%.disabled}
        fi
    done

    echo_ "Updating repository ..."
    apt-get -q update

    trace_out
}
#------------------------------


# Mirantis Public Repo functions
#-------------------------------
function add_mirantis_public_repo() {
    trace_in add_mirantis_public_repo "$@"

    local apt_list_file="/etc/apt/sources.list.d/mirantis-public-fuel-${FUEL_VERSION}.list"
    local repo_url="${MIRANTIS_PUBLIC_REPO_PREFIX}/${FUEL_VERSION}/ubuntu"

    #wget ${repo_url}/Release.key -O - | apt-key add -

    echo "deb ${repo_url} precise main" > "${apt_list_file}"

    echo_ "Updating repository ..."
    apt-get -q update

    trace_out
}


function drop_mirantis_public_repos() {
    trace_in drop_mirantis_public_repo "$@"

    find /etc/apt/sources.list.d -name 'mirantis-public*.list' -delete

    echo_ "Updating repository ..."
    apt-get -q update

    trace_out
}
#-------------------------------



# Mirantis Internal Repo functions
#---------------------------------
function add_mirantis_internal_repo() {
    trace_in add_mirantis_internal_repo "$@"

    local repo_id
    local repo_name_subname
    local apt_list_file
    local remote_repo_url
    local local_repo_path

    for repo_id in "$@"; do
        echo_ "Adding internal repo for '$repo_id'"

        if [[ "$repo_id" =~ (stable|testing) ]]; then
            remote_repo_url="${MIRANTIS_INTERNAL_REPO_PREFIX}/${FUEL_TARGET}-fuel-${FUEL_VERSION}-${repo_id}/ubuntu"
            apt_list_file="/etc/apt/sources.list.d/mirantis-internal-fuel-${FUEL_VERSION}-${repo_id}.list"

            wget ${remote_repo_url}/Release.key -O - | apt-key add -
            echo "deb ${remote_repo_url}/ ./" > "${apt_list_file}"
        elif [[ "$repo_id" =~ [[:digit:]]+ ]]; then
            repo_subname="${FUEL_TARGET}-fuel-${FUEL_VERSION}-testing-${repo_id}"
            remote_repo_url="${MIRANTIS_INTERNAL_REPO_PREFIX}/${repo_subname}/ubuntu"
            local_repo_path="${APT_LOCAL_REPO}/${repo_subname}/ubuntu"
            apt_list_file="/etc/apt/sources.list.d/mirantis-build-request-${repo_id}.list"

            # Check if pinning preferences for local repo is set
            if [[ ! -f "/etc/apt/preferences.d/local_repo.pref" ]]; then
                cat << EOF > "/etc/apt/preferences.d/local_repo.pref"
Package: *
Pin: origin ""
Pin-Priority: 550
EOF
fi

            # Check if local repo folder exists
            if [[ ! -d "${APT_LOCAL_REPO}" ]]; then
                mkdir -p ${APT_LOCAL_REPO}
            fi

            # Drop repo folder if exists
            if [[ -d "${local_repo_path}" ]]; then
                rm -rf "${local_repo_path}"
            fi

            # Fetch repo into local store
            wget -r -np -nH -A *.deb,*.dsc,*.gz,*.key ${remote_repo_url}/ -P ${APT_LOCAL_REPO}
            apt-key add ${local_repo_path}/Release.key
            echo "deb file:${local_repo_path} ./" > "${apt_list_file}"
        else
            echo_ "Unknown repository identifier, '$repo_id'"
            return
        fi
    done

    echo_ "Updating repository ..."
    apt-get -q update

    trace_out
}


function drop_mirantis_internal_repos() {
    trace_in drop_mirantis_internal_repos "$@"

    find /etc/apt/sources.list.d -name 'mirantis-internal*.list' -delete
    find /etc/apt/sources.list.d -name 'mirantis-build-request*.list' -delete

    rm -rf ${APT_LOCAL_REPO}

    echo_ "Updating repository ..."
    apt-get -q update

    trace_out
}


#TODO(): make this function work :)
function clean_local_repo() {
    trace_in clean_local_repo "$@"

    local id i d

    for i in $(find /etc/apt/sources.list.d -name 'mirantis-build-request-*' -print); do
        if [[ $i =~ mirantis-build-request-([[:digit:]]+)\.list ]]; then
            id=${BASH_REMATCH[1]}
            if [[ " $BUILD_REQUEST_IDS " =~ " ${id} " ]]; then
                echo_h2 "${id} in ${BUILD_REQUEST_IDS}"
            else
                d=${APT_LOCAL_REPO}/${OBS_REPO_PREFIX}-${id}
                if [[ -d "$d" ]]; then
                    rm -rf "$d"
                fi
                rm -f /etc/apt/sources.list.d/obs-request-${id}
            fi
        fi
    done

    trace_out
}
#---------------------------------



# Openstack Dashboard functions
#------------------------------
function install_openstack_dashboard() {
    trace_in install_openstack_dashboard "$@"

    apt_install_anyway openstack-dashboard
    dpkg --purge openstack-dashboard-ubuntu-theme
    service apache2 restart

    trace_out
}


function configure_openstack_dashboard() {
    trace_in configure_openstack_dashboard "$@"
    trace_out
}


function cleanup_openstack_dashboard() {
    trace_in cleanup_openstack_dashboard "$@"
    trace_out
}
#------------------------------



# Murano API functions
#---------------------
function install_murano_api() {
    trace_in install_murano_api "$@"

    apt_install_anyway murano-api

    trace_out
}


function configure_murano_api() {
    trace_in configure_murano_api "$@"

    echo_ "Configuring file '$MURANO_CONF_FILE'"

    # Logging settings
    iniset "$MURANO_CONF_FILE" 'DEFAULT' 'debug' "$(trueorfalse False $MURANO_DEBUG)"
    iniset "$MURANO_CONF_FILE" 'DEFAULT' 'verbose' "$(trueorfalse False $MURANO_VERBOSE)"
    iniset "$MURANO_CONF_FILE" 'DEFAULT' 'log_file' "$MURANO_LOG_DIR/murano-api.log"

    # RabbitMQ settings
    iniset "$MURANO_CONF_FILE" 'DEFAULT' 'rabbit_host' "$RABBIT_HOST"
    iniset "$MURANO_CONF_FILE" 'DEFAULT' 'rabbit_port' "$RABBIT_PORT"
    iniset "$MURANO_CONF_FILE" 'DEFAULT' 'rabbit_userid' "$RABBIT_USERID"
    iniset "$MURANO_CONF_FILE" 'DEFAULT' 'rabbit_password' "$RABBIT_PASSWORD"
    iniset "$MURANO_CONF_FILE" 'DEFAULT' 'rabbit_virtual_host' "$RABBIT_VHOST"

    # Database settings
    iniset "$MURANO_CONF_FILE" 'database' 'connection' "$(database_connection_url murano)"

    # Keystone settings
    iniset "$MURANO_CONF_FILE" 'keystone_authtoken' 'auth_host' "$MURANO_AUTH_HOST"
    iniset "$MURANO_CONF_FILE" 'keystone_authtoken' 'auth_port' "$MURANO_AUTH_PORT"
    iniset "$MURANO_CONF_FILE" 'keystone_authtoken' 'admin_user' "$ADMIN_USERNAME"
    iniset "$MURANO_CONF_FILE" 'keystone_authtoken' 'admin_password' "$ADMIN_PASSWORD"
    iniset "$MURANO_CONF_FILE" 'keystone_authtoken' 'signing_dir' "$MURANO_API_SIGNING_DIR"
    #-------------------------

    trace_out
}


function cleanup_murano_api() {
    trace_in cleanup_murano_api "$@"
    trace_out
}
#---------------------



# Murano Dashboard functions
#---------------------------
function install_murano_dashboard() {
    trace_in install_murano_dashboard "#@"
    trace_out
}


function configure_murano_dashboard() {
    trace_in configure_murano_dashboard "$@"

    configure_dashboard_local_settings

    trace_out
}


function cleanup_murano_dashboard() {
    trace_in cleanup_murano_dashboard "$@"
    trace_out
}
#---------------------------



function configure_dashboard_local_settings() {
    # Insert header
    cat << EOF >> "$HORIZON_LOCAL_CONFIG"

#MURANO_CONFIG_SECTION_BEGIN
#-------------------------------------------------------------------------------

OPENSTACK_HOST = '$MURANO_AUTH_HOST'
EOF

    # Insert settings
    if [[ $(trueorfalse Flase $MURANO_SSL_ENABLED) = 'True' ]]; then
        cat << EOF >> "$HORIZON_LOCAL_CONFIG"
OPENSTACK_SSL_NO_VERIFY = True
OPENSTACK_KEYSTONE_URL = "https://%s:5000/v2.0" % OPENSTACK_HOST
OPENSTACK_KEYSTONE_ADMIN_URL = "https://%s:35357/v2.0" % OPENSTACK_HOST
QUANTUM_URL = "https://%s" % OPENSTACK_HOST
EOF
    else
        cat << EOF >> "$HORIZON_LOCAL_CONFIG"
OPENSTACK_KEYSTONE_URL = "http://%s:5000/v2.0" % OPENSTACK_HOST
OPENSTACK_KEYSTONE_ADMIN_URL = "http://%s:35357/v2.0" % OPENSTACK_HOST
QUANTUM_URL = "http://%s" % OPENSTACK_HOST
ALLOWED_HOSTS = '*'
EOF
    fi

    # Insert footer
    cat << EOF >> "$HORIZON_LOCAL_CONFIG"

#-------------------------------------------------------------------------------
#MURANO_CONFIG_SECTION_END

EOF

}


# configure_murano() - Set config files, create data dirs, etc
function configure_murano_extras {
    # Create dirs / fix permissions
    #------------------------------
    chmod -R 755 "$MURANO_CACHE_DIR"

    mkdir -p "$MURANO_DASHBOARD_CACHE"
    chown -R $HORIZON_USER:$HORIZON_GROUP "$MURANO_DASHBOARD_CACHE"
    #------------------------------


    # Configuring Opensta—Åk Dashboard
    #--------------------------------
    configure_dashboard_local_settings

    /usr/bin/modify-horizon-config.sh uninstall
    MURANO_DASHBOARD_DB_DIR=$MURANO_DASHBOARD_DB_DIR MURANO_AUTH_HOST=$MURANO_AUTH_HOST /usr/bin/modify-horizon-config.sh install

    sudo -u $HORIZON_USER python "$HORIZON_DIR/manage.py" collectstatic --noinput
    sudo -u $HORIZON_USER python "$HORIZON_DIR/manage.py" syncdb --noinput
    #--------------------------------

    # Restart Apache
    #---------------
    service apache2 restart
    #---------------
}


function install_murano_packages() {
    trace_in install_murano_packages "$@"

    local pkg
    for pkg in $MURANO_PACKAGES_DEBIAN; do
        echo_h1 "Installing package '$pkg'"
        apt_install_anyway $pkg
    done

    trace_out
}


function purge_murano_packages() {
    trace_in purge_murano_packages "$@"

    local pkg
    for pkg in $MURANO_PACKAGES_DEBIAN; do
        apt-get --yes purge $pkg
    done

    trace_out
}


function restart_murano() {
    service murano-api restart
    service murano-engine restart
}
